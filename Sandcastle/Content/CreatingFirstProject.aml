<?xml version="1.0" encoding="utf-8"?>
<topic id="83a0dc5f-fb15-4210-a7a9-75275dca4ab6" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>You are now ready to create your first FRC project using dotnet.</para>
    </introduction>

    <section>
      <title>Creating a project.</title>
      <content>
        <para>
          <para>
            Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
            and then clicking <legacyBold>Project</legacyBold>.
          </para>
          <para>
            In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select the base class you would like to use. For more
            information on which base class to use, see the <link xlink:href="#baseclass">Selecting a Base Class</link> section below.
          </para>
          <para>
            Enter a project name, a folder you would like to place your code in, and a name for the solution.
          </para>
          <para>
            Click <legacyBold>OK</legacyBold>. This will then create your first project.
          </para>
          <para>
            Now that your project is created, we recommend that you update the WPILib, as the extension might not always
            include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
            for instructions on doing this.
          </para>
        </para>
      </content>
    </section>


    <section address="baseclass">
      <title>Selecting a base class.</title>
      <content>
        <para>
          RobotDotNet offers 5 base classes to start from. 3 of them (Sample Robot, Iterative Robot, and Command Robot) are implementations of the official WPILib base classes. For more information on these, please see
          <externalLink>
            <linkText>the official WPILib help on these base classes.</linkText>
            <linkUri>https://wpilib.screenstepslive.com/s/4485/m/13810/l/241853-choosing-a-base-class</linkUri>
          </externalLink>
          However, if you would like to use the Command Robot template, please have a look at the <link xlink:href="170012b3-b0f8-4b6f-9d87-431df0ef0969">Attributed Command Robot</link> base class, which allows for even easier command based robot creation.
        </para>
        <para>
          RobotDotNet also offers 2 custom base classes. The <link xlink:href="170012b3-b0f8-4b6f-9d87-431df0ef0969">Attributed Command Robot</link> base class allows for creating command based robots while removing most of the boilerplate code usually required.
          The LabVIEW style base class is designed to help teams who are transitioning from LabVIEW to text based code, with some of the base methods named similarly to LabVIEW, and Autonomous and Test modes running in their own thread.
        </para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>

      <externalLink>
        <linkText>RobotDotNet on GitHub</linkText>
        <linkAlternateText>Go to GitHub</linkAlternateText>
        <linkUri>https://GitHub.com/RobotDotNet</linkUri>
      </externalLink>

      <codeEntityReference>N:WPILib.Extras.AttributedCommandModel</codeEntityReference>
      <codeEntityReference>T:WPILib.Extras.LabViewRobot</codeEntityReference>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
