<?xml version="1.0" encoding="utf-8"?>
<topic id="83a0dc5f-fb15-4210-a7a9-75275dca4ab6" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>You are now ready to create your first FRC project using dotnet.</para>
    </introduction>

    <procedure>
      <title>Available Templates</title>
      <steps class="bullet">
        <step>
          <content>
            <para>
              <link xlink:href="#sample">Sample Robot:</link>
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <link xlink:href="#iterative">Iterative Robot: The Iterative Robot base class </link>
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <link xlink:href="#command">Command Based Robot:</link>
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <link xlink:href="#labview">LabVIEW Style Robot:</link>
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <link xlink:href="#attributedcommand">Attributed Command Based Robot:</link>
            </para>
          </content>
        </step>
      </steps>
    </procedure>

    <section address="sample">
      <title>Creating a Sample Robot Project</title>
      <content>
        <para>
          Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
          and then clicking <legacyBold>Project</legacyBold>.
        </para>
        <para>
          In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select <legacyBold>Sample Robot</legacyBold>.
        </para>
        <para>
          Enter a project name, a folder you would like to place your code in, and a name for the solution.
        </para>
        <para>
          Click <legacyBold>OK</legacyBold>. This will then create your first project.
        </para>
        <para>
          Now that your project is created, we recommend that you update the WPILib, as the extension might not always
          include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
          for instructions on doing this.
        </para>
      </content>
    </section>

    <section>
      <title>Creating an Iterative Robot Project</title>
      <content>
        <para>
          Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
          and then clicking <legacyBold>Project</legacyBold>.
        </para>
        <para>
          In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select <legacyBold>Iterative Robot</legacyBold>.
        </para>
        <para>
          Enter a project name, a folder you would like to place your code in, and a name for the solution.
        </para>
        <para>
          Click <legacyBold>OK</legacyBold>. This will then create your first project.
        </para>
        <para>
          Now that your project is created, we recommend that you update the WPILib, as the extension might not always
          include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
          for instructions on doing this.
        </para>
      </content>
    </section>

    <section>
      <title>Creating a Command Based Robot Project</title>
      <content>
        <para>
          Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
          and then clicking <legacyBold>Project</legacyBold>.
        </para>
        <para>
          In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select <legacyBold>Command Robot</legacyBold>.
        </para>
        <para>
          Enter a project name, a folder you would like to place your code in, and a name for the solution.
        </para>
        <para>
          Click <legacyBold>OK</legacyBold>. This will then create your first project.
        </para>
        <para>
          Now that your project is created, we recommend that you update the WPILib, as the extension might not always
          include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
          for instructions on doing this.
        </para>
      </content>
    </section>

    <section>
      <title>Creating a LabVIEW Style Robot Project</title>
      <content>
        <para>
          Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
          and then clicking <legacyBold>Project</legacyBold>.
        </para>
        <para>
          In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select <legacyBold>LabVIEW Style Robot</legacyBold>.
        </para>
        <para>
          Enter a project name, a folder you would like to place your code in, and a name for the solution.
        </para>
        <para>
          Click <legacyBold>OK</legacyBold>. This will then create your first project.
        </para>
        <para>
          Now that your project is created, we recommend that you update the WPILib, as the extension might not always
          include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
          for instructions on doing this.
        </para>
      </content>
    </section>

    <section>
      <title>Creating an Attributed Command Style Project</title>
      <content>
        <para>
          Start by clicking the <legacyBold>File</legacyBold> menu, pointing to <legacyBold>New</legacyBold>,
          and then clicking <legacyBold>Project</legacyBold>.
        </para>
        <para>
          In the Visual C# list, select <legacyBold>FRC</legacyBold>, then select <legacyBold>Attributed Command Robot</legacyBold>.
        </para>
        <para>
          Enter a project name, a folder you would like to place your code in, and a name for the solution.
        </para>
        <para>
          Click <legacyBold>OK</legacyBold>. This will then create your first project.
        </para>
        <para>
          Now that your project is created, we recommend that you update the WPILib, as the extension might not always
          include the newest WPILib. See <link xlink:href="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</link>
          for instructions on doing this.
        </para>
      </content>
    </section>

    

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Creating an Iterative Robot</title>

      <steps class="ordered">
        <step>
          <content>
            <para>Go to File | New | Project</para>
          </content>
        </step>
        <step>
          <content>
            <para>In Visual C#, go to the FRC folder, and select <legacyBold>Iterative Robot</legacyBold>.
          </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
