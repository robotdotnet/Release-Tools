<?xml version="1.0" encoding="utf-8"?>
<topic id="0c9aca86-82a6-48d8-8e2b-a198bedf8d76" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>
        The LabVIEW Style Robot is designed to make it easier for teams to move from LabVIEW to text based programming.
        Instead of running autonomous and test modes in the main robot thread, it runs them in a seperate thread. In addition, the main methods have been renamed
        to match their equivalents in LabVIEW. Information on the methods contained in this base class can be found at
        <codeEntityReference>T:WPILib.Extras.LabViewRobot</codeEntityReference>
      </para>
    </summary>

    <prerequisites>
      <content>
        <para>
          This tutorial requires the WPILib.Extras NuGet package to be installed.
        </para>
      </content>
    </prerequisites>

    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>Creating a basic project with the LabVIEW style</title>
      <steps class="bullet">
        <step>
          <content>
            <para>Create a new robot project using the LabVIEW Robot template.  You should see the following methods in the main robot class:</para>
            <definitionTable>
              <definedTerm>Begin</definedTerm>
              <definition>
                <para>
                  This method is equivalent to Begin.vi in LabVIEW. This is where you should put your robot initialization code.
                </para>
              </definition>
              <definedTerm>Disabled</definedTerm>
              <definition>
                <para>
                  This method is equivalent to Disabled.vi. It runs in the main robot thread whenever the robot is Disabled. Use the CallContext parameter
                  to determine if it is the initialization run or the execute run on the method.
                </para>
              </definition>
              <definedTerm>Teleoperated</definedTerm>
              <definition>
                <para>
                  This method is equivalent to Teleop.vi. It runs in the main robot thread whenever the robot is in Teleoperated mode and Enabled. Use the CallContext parameter
                  to determine if it is the initialization run or the execute run on the method.
                </para>
              </definition>
              <definedTerm>Autonomous</definedTerm>
              <definition>
                <para>
                  This method is equivalent to Autonomous.vi. It runs in its own thread, and is called once only at the beginning of Autonomous Enabled.
                </para>
              </definition>
              <definedTerm>Test</definedTerm>
              <definition>
                <para>
                  This method is equivalent to Test.vi. It runs in its own thread, and is called once only when the robot first enters test mode. 
                  Note that this includes Test Disabled, and its state will not switch when switching between enabled and disabled test modes.
                </para>
              </definition>
            </definitionTable>
          </content>
        </step>
        <step>
          <title>Properly Handling Threads.</title>
          <content>
            <para>
              When dealing with threads, it is important to note that the threads will be aborted when switching modes. This means you should not use any functionality
              that requires cleanup, such as writing to a log file. If you must, you can try and catch the ThreadAbortedException, and run your cleanup code there. 
              However, you have to make sure to not cancel the abort, as this will lock up the robot code. In addition, please do not start another thread,
              as the library will not be able to clean up that thread, and it will continue to run.
            </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- Optional additional procedure or section with procedure -->

    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->

    <relatedTopics>
      <externalLink>
        <linkText>RobotDotNet on GitHub</linkText>
        <linkAlternateText>Go to GitHub</linkAlternateText>
        <linkUri>https://GitHub.com/RobotDotNet</linkUri>
      </externalLink>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
      <codeEntityReference>T:WPILib.Extras.LabViewRobot</codeEntityReference>
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
