<?xml version="1.0" encoding="utf-8"?>
<topic id="e754f6a3-c404-4582-aac8-819d47185cbc" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>MonoGame is the recommended front end for creating simulators. Below are the steps to get the basic simulator working. </para>
    </introduction>
    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Installing MonoGame and creating a MonoGame Project</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Install the latest MonoGame release for your operating system. Follow the instructions at the link to get it installed.
              <externalLink>
                <linkText>The current release is 3.4.</linkText>
                <linkUri>http://www.monogame.net/2015/04/29/monogame-3-4/</linkUri>
              </externalLink>
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Open your solution with your main robot project.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Right click on your solution file in Visual Studio, and select Add | New Project.</para>
          </content>
        </step>
        <step>
          <content>
            <para>On the left, you should see a template folder for MonoGame. Select that, and the select the right template for your OS. 
            For the name, it can be anything, however it is best for it to have no spaces in it.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Your new project should be created, and you should have at least 2 projects in your solution.</para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>


    <procedure>
      <title>Setting up the MonoGame project.</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Set the MonoGame project as the startup project.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Build your solution to prepare all the references.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Add a reference to your main robot project in the simulator project. To do this, right click on the simulator projects References option,
            then click Add Reference. Click <c>Projects</c>, and check your main robot project. Then click OK.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Use NuGet to add a reference to the FRC MonoGame Simulator.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Replace the contents of the Program.cs file in the MonoGame project with the content below. Replace $mainrobotclass with the name
            of your main robot class, replace $mainrobotnamespace with the namespace your main robot class is contained in,
            replace $monogameclass with the name of your MonoGame class, and replace $monogamenamespace with the namespace of your MonoGame class.</para>
            <code language="c#">
             	using HAL.Simulator;
				using WPILib;
				using $mainrobotnamespace;
				
				namespace $monogamenamespace
				{
				    public static class Program
				    {
				        public static void Main()
				        {
				            RobotBase.Main(null, typeof($mainrobotclass));
				        }
				    }
				
				    public class Simulator : ISimulator
				    {
				        public void Initialize()
				        {
				        }
				
				        public void Start()
				        {
				            SimHooks.WaitForProgramStart();
				            DriverStationGUI.DriverStation.StartDriverStationGui();
				            using (var game = new $monogameclass())
				                game.Run();
				        }
				
				        public string Name => "Mono Game Simulator";
				    }
				}
              
            </code>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>